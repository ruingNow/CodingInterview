/******************************************************************************************
[编程题] 好多鱼！
时间限制：1秒
空间限制：32768K
牛牛有一个鱼缸。鱼缸里面已经有n条鱼，每条鱼的大小为fishSize[i] (1 ≤ i ≤ n,均为正整数)，牛牛现在想把新
捕捉的鱼放入鱼缸。鱼缸内存在着大鱼吃小鱼的定律。经过观察，牛牛发现一条鱼A的大小为另外一条鱼B大小的2倍到
10倍(包括2倍大小和10倍大小)，鱼A会吃掉鱼B。考虑到这个，牛牛要放入的鱼就需要保证：
1、放进去的鱼是安全的，不会被其他鱼吃掉
2、这条鱼放进去也不能吃掉其他鱼
鱼缸里面已经存在的鱼已经相处了很久，不考虑他们互相捕食。现在知道新放入鱼的大小范围[minSize,maxSize](考虑
鱼的大小都是整数表示),牛牛想知道有多少种大小的鱼可以放入这个鱼缸。 
输入描述:
输入数据包括3行.
第一行为新放入鱼的尺寸范围minSize,maxSize(1 ≤ minSize,maxSize ≤ 1000)，以空格分隔。

第二行为鱼缸里面已经有鱼的数量n(1 ≤ n ≤ 50)

第三行为已经有的鱼的大小fishSize[i](1 ≤ fishSize[i] ≤ 1000)，以空格分隔。


输出描述:
输出有多少种大小的鱼可以放入这个鱼缸。考虑鱼的大小都是整数表示
******************************************************************************************/

#include<iostream>

using namespace std;

int a[55];//鱼缸里已经有的鱼的大小

int mi, ma;//新放入的鱼的最小尺寸，最大尺寸

int n;//鱼缸里已经有的鱼数

int main(void)
{

	cin >> mi >> ma;//新放入的鱼的最小尺寸，最大尺寸
	cin >> n;//鱼缸的鱼数
	for (int i = 0; i < n; i++) 
        cin >> a[i];//鱼缸鱼的大小

	int ans = 0;
	for (int i = mi; i <= ma; i++)
    {
		int flag = 1;
		for (int j = 0; j < n; j++)
        {
			if ((i >= a[j] * 2 && i <= a[j] * 10) || (i * 2 <= a[j] && i * 10 >= a[j]))
            {
				flag = 0;
			}
		}
		
		if (flag) 
        {
			ans++;
			cout << i << endl;
		}
	}
	cout << ans << endl;

	return 0;
}
